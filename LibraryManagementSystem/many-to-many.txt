class Borrower(models.Model):
    books = models.ManyToManyField('Book', through='BorrowedBook')
    book_borrower_student = models.ForeignKey(Student_Information, on_delete=models.CASCADE)
    borrow_date = models.DateTimeField(default=timezone.now)
    due_date = models.DateTimeField()
    return_date = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
         return f"Student: {self.book_borrower_student.user} borrowed books on Date: {self.borrow_date}"

class BorrowedBook(models.Model):
    borrower = models.ForeignKey(Borrower, on_delete=models.CASCADE)
    book = models.ForeignKey('Book', on_delete=models.CASCADE)
    # Add any other fields related to the borrowing of the book, if needed
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class BorrowerAdmin(admin.ModelAdmin):
    list_display = ('book_borrower_student', 'borrow_date', 'due_date', 'return_date','created_at','updated_at')
    readonly_fields = ('created_at', 'updated_at',)
admin.site.register(Borrower, BorrowerAdmin)

# Customize the BorrowedBook admin interface
class BorrowedBookAdmin(admin.ModelAdmin):
    list_display = ('borrower', 'book', 'created_at', 'updated_at',)
    readonly_fields = ('created_at', 'updated_at',)
admin.site.register(BorrowedBook, BorrowedBookAdmin)

---------------------------------------------------------------
this html and js display the author fiedl only if book is selected
------------------------------------------
Do Not Delete. Can be used for future reference
{% extends 'base.html' %}
{% load static %}
{% block title %} Test form Us {% endblock %}
{% block content %}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container .select2-selection--single {
        height: 38px; /* Adjust height to match form-control */
        border: 1px solid #ccc; /* Add a thin border */
        border-radius: 4px; /* Add rounded corners */
      }
      .select2-container .select2-selection--multiple .select2-selection__rendered {
        padding-top: 4px; /* Adjust padding for better alignment */
      }
</style>
<div class="container">
    <h2>Book Selection Form</h2>
    <form id="borrowBookForm">
        <div class="form-row">
            <div class="col">
                <div class="form-group">
                <label for="selectBooks">Select Books (Multi-Select):</label>
                <select id="selectBooks" class="form-control" multiple></select>
                </div>
            </div>
            <div class="col">
                <div class="form-group" id="authorContainer" style="display:none;">
                <label for="selectAuthor">Author:</label>
                <select id="selectAuthor" class="form-control" multiple></select>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="selectUser">Select User:</label>
            <select id="selectUser" class="form-control"></select>
        </div>
    </form>
    <div class="form-group">
        <button type="button" class="btn btn-secondary">Submit</button>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js" defer></script>
<script>
    $(document).ready(function() {
        $('#selectBooks').select2({
            placeholder: 'Select books',
            ajax: {
                url: "{% url 'get_books' %}",
                dataType: 'json',
                processResults: function(data) {
                    return {
                        results: data.results
                    };
                }
            }
        });

        $('#selectBooks').on('change', function() {
            var selectedBookIds = $(this).val(); // Get the selected book IDs
            if (selectedBookIds) {
                $.ajax({
                    url: "{% url 'get_authors_for_books' %}",
                    method: 'GET',
                    data: { book_ids: selectedBookIds },
                    success: function(response) {
                        $('#selectAuthor').empty(); // Clear the author dropdown
                        if (response.results.length > 0) {
                            $('#selectAuthor').closest('.form-group').show(); // Show the author field
                            $('#selectAuthor').select2({
                                placeholder: 'Select author',
                                data: response.results
                            });
                        } else {
                            $('#selectAuthor').closest('.form-group').hide(); // Hide the author field if no authors are found
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error fetching authors for books:', error);
                    }
                });
            }
        });

        $('#selectUser').select2({
            placeholder: 'Select user',
            ajax: {
                url: "{% url 'get_users' %}",
                dataType: 'json',
                processResults: function(data) {
                    return {
                        results: data.results
                    };
                }
            }
        });
    });
</script>
{% endblock %}
Do Not Delete
--------------------------------------------------------------------------------------