class Borrower(models.Model):
    books = models.ManyToManyField('Book', through='BorrowedBook')
    book_borrower_student = models.ForeignKey(Student_Information, on_delete=models.CASCADE)
    borrow_date = models.DateTimeField(default=timezone.now)
    due_date = models.DateTimeField()
    return_date = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
         return f"Student: {self.book_borrower_student.user} borrowed books on Date: {self.borrow_date}"

class BorrowedBook(models.Model):
    borrower = models.ForeignKey(Borrower, on_delete=models.CASCADE)
    book = models.ForeignKey('Book', on_delete=models.CASCADE)
    # Add any other fields related to the borrowing of the book, if needed
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class BorrowerAdmin(admin.ModelAdmin):
    list_display = ('book_borrower_student', 'borrow_date', 'due_date', 'return_date','created_at','updated_at')
    readonly_fields = ('created_at', 'updated_at',)
admin.site.register(Borrower, BorrowerAdmin)

# Customize the BorrowedBook admin interface
class BorrowedBookAdmin(admin.ModelAdmin):
    list_display = ('borrower', 'book', 'created_at', 'updated_at',)
    readonly_fields = ('created_at', 'updated_at',)
admin.site.register(BorrowedBook, BorrowedBookAdmin)

{% extends 'base.html' %}
{% load static %}
{% block title %} Test form Us {% endblock %}
{% block content %}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<div class="container col-md-12" style="">
    <h2>Book Selection Form</h2>
    <form id="borrowBookForm">
      <div class="form-group col-sm-4">
        <label for="selectBooks">Select Books (Multi-Select):</label>
        <select id="selectBooks" class="form-control" multiple></select>
      </div>
      <div class="form-group col-sm-4">
        <label for="selectAuthor">Author:</label>
        <select id="selectAuthor" class="form-control" multiple></select>
      
      <div class="form-group">
        <label for="selectUser">Select User:</label>
        <select id="selectUser" class="form-control"></select>
      </div>
    </form>
    <div class="form-group"><button>Submit</button></div>
{% endblock %}

{% block scripts %}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js" defer></script>
<script>
    $(document).ready(function() {
        $('#selectBooks').select2({
            placeholder: 'Select books',
            ajax: {
                url: "{% url 'get_books' %}",
                dataType: 'json',
                processResults: function(data) {
                    return {
                        results: data.results
                    };
                }
            }
        });
    
        $('#selectBooks').on('change', function() {
            var selectedBookIds = $(this).val(); // Get the selected book IDs
            if (selectedBookIds) {
                $.ajax({
                    url: "{% url 'get_authors_for_books' %}",
                    method: 'GET',
                    data: { book_ids: selectedBookIds },
                    success: function(response) {
                        $('#selectAuthor').empty(); // Clear the author dropdown
                        $('#selectAuthor').select2({
                            placeholder: 'Select author',
                            data: response.results
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Error fetching authors for books:', error);
                    }
                });
            }
        });
    
        $('#selectUser').select2({
            placeholder: 'Select user',
            ajax: {
                url: "{% url 'get_users' %}",
                dataType: 'json',
                processResults: function(data) {
                    return {
                        results: data.results
                    };
                }
            }
        });
    });
    
</script>
{% endblock %}

def test(request):
    return render(request,'LibraryManagementSystem/test-form.html')

def get_books(request):
    books = Book.objects.all()
    data = [{'id': book.pk, 'text': book.title, 'author_id': book.author.pk} for book in books]
    return JsonResponse({'results': data})

def get_authors(request):
    authors = Author.objects.all()
    data = [{'id': author.pk, 'text': author.name} for author in authors]
    return JsonResponse({'results': data})

def get_authors_for_books(request):
    book_ids = request.GET.getlist('book_ids[]')
    authors = set()
    for book_id in book_ids:
        book = Book.objects.filter(pk=book_id).first()
        if book:
            authors.add(book.author.pk)
    data = [{'id': author_id, 'text': Author.objects.get(pk=author_id).name} for author_id in authors]
    return JsonResponse({'results': data})

def get_users(request):
    users = MyUser.objects.all()
    data = [{'id': user.pk, 'text': user.email} for user in users]
    return JsonResponse({'results': data})